//////////////////////////////////////////////////////////////////////
//																	//
//		Func.tsf	Sample Script for ComScrp Library				//
//		Function Sample												//
//																	//
//				Copyright Takahiro Ito, 2003/01/19 - 2003/02/23		//
//////////////////////////////////////////////////////////////////////

/*
	このサンプルは、関数について説明しています。
	このスクリプト処理系で言う「関数」とは、C/C++などの関数とほぼ同じです
	ローカル変数は、全て、ローカルスタックを使用して処理されます。
	ただし、１つの関数につき、65535以下でなければなりません。
	(256 K Bytesまで)
*/

/*
	関数を作成するには、キーワードfunctionを使用して、次のように宣言します。
*/
function FuncSample1;		// 関数 FuncSample1を宣言しました。
int a, b, c;				// この変数は、スタックに置かれます。

	a = 1;
	b = 2;
	c = a + b;				// a + b を計算して、cに代入します
	result c;				// cの値を呼び出し元に返します。
endfunc;

/*
	そして、関数の終了を宣言するには、
	上記のように、endfunc;と記述します。
*/

/*
	関数は、通常のコマンドと同じく、
	パラメータを取ることができます。
*/
function FuncSample2 a, b;
int c;

	c = a * b;
	result c;
endfunc;

/*
	この例では、引数を二つ受け取り、その積を返します。
*/

/*
	関数を呼び出すには、callコマンドを使用して、
	関数名と実引数を指定します。
	戻り値は、グローバル変数 RetValue に格納されます。
*/

#main;
int x;

	call FuncSample2, 5, 8;
	x = RetValue;
	mes "5 * 8 = ", x;

/*
	関数の定義は、スクリプト中のどこにあっても同じです。
	ただし、使用する位置が、定義よりも前にある場合は、
	プロトタイプ宣言が必要です。
*/
prototype function FuncSample3 a, b;
	call FuncSample3, 32, 4;
	x = RetValue;
	mes "32 / 4 = ", x;
	end;

function FuncSample3 a, b;
	result a / b;
endfunc;
