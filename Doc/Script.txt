バイナリスクリプト	フォーマット

[Header]
[Program]
[Data]

ヘッダー	６４バイト
	識別コード						4 Bytes
	バージョン						4 Bytes
	内部処理形式バージョンコード	4 Bytes
	予約							4 Bytes

	プログラムの開始位置			4 Bytes
	プログラムの長さ				4 Bytes
	データの開始位置				4 Bytes
	データの長さ					4 Bytes
	予約						   32 Bytes

プログラムコード
　１レコードは４バイト
データ
　４バイト境界にそろえる。
メモリ

　数値変数領域
	ワーク変数　　ローカル　　：DLL,App  16,384 x 4 =  65,536 Bytes
	システム変数　グローバル　：DLL,App  16,384 x 4 =  65,536 Bytes
　	ワーク変数	　プライベート：DLLのみ  32,768 x 4 = 131,072 Bytes
	スタック　　　ローカル　　：DLL,App  65,536 x 4 = 262,144 Bytes
　合計	524,288 Bytes = 512 K Bytes

　文字列変数領域
　　ワーク変数　　ローカル　　：DLL,App 2048 x 256 Bytes = 524,288 Bytes

総計：1,048,576 Bytes = 1 M Bytes


　プログラムレコードのフォーマット
+---------------+---------------+---------------+---------------+
|    Byte  3    |    Byte  2    |    Byte  1    |    Byte  0    |
+-+-+-+-+-------+-+-+-+---+-----+-------------------------------+
|7|6|5|4|3 2 1 0|7|6|5|4 3|2|1 0|7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0|
+-+-+-+-+-------+-+-+-+---+-----+-------------------------------+
 | | | |    |    | | |  |  |  |                 |
 | | | |    |    | | |  |  |  |                 +---- パラメータ　下位 2 Bytes
 | | | |    |    | | |  |  |  +---- 拡張変数アクセス
 | | | |    |    | | |  |  +---- Reserved
 | | | |    |    | | |  +---- 変数ポインタターゲット
 | | | |    |    | | +---- 変数ポインティングフラグ
 | | | |    |    | +---- Reserved
 | | | |    |    +---- パラメータ長フラグ
 | | | |    +---- コードタイプ
 | | | +---- Reserved
 | | +---- パラメータ　セパレート
 | +---- コマンド　セパレート
 +---- アブソリュートアドレス　フラグ

・アブソリュートアドレス　フラグ
	このビットが１の場合は、下位３１ビット全てが、レコードではなく、
	IF,ELSEなどで特別に使用される、絶対番地であることを示す。

・コマンド　セパレート
	このビットが1なら、次のコマンドの始まりを示す。
・パラメータ　セパレート
	このビットが1なら、パラメータの区切りを示す。
・コードタイプ
	このレコードのコードの種類
・パラメータ長フラグ
	このビットが1なら、さらにもう1レコードを読みその上位2バイトを、
	現在のレコードのパラメータに加える

・変数ポインティングフラグ
	このフラグが1にセットされているときは、パラメータは、
	即値ではなく、変数のアドレス（インデックス）を表す。
・変数ポインタターゲット
	変数ポインティングフラグが1の場合のみ有効。
	ポインタの示すアドレスが、どの領域であるかを指定する。
	0:ローカル、1:グローバル、2:プライベート、3:予約

・拡張変数アクセス。
	このフラグが１の場合は、グローバル変数BP-パラメータの
	ワークスタックにアクセスする。(ローカル変数へアクセス)
	このフラグが２の場合は、グローバル変数BP+パラメータの
	ワークスタックにアクセスする。(関数の引数へアクセス)

・パラメータ
	コマンドなどのパラメータ。

***********************************************************************************
汎用コマンドと、拡張コマンド
　汎用コマンドとは、ほとんどの言語処理系において、一般的であり、かつその処理内容も
共通であるようなコマンドで、DLLの内部で処理が完了できるようなコマンドである。
　一方、拡張コマンドとは、各処理系に固有の為、DLLが処理できないようなコマンドである。
DLLは実行しようとしているコマンドが、汎用コマンドの場合は、その処理を自分自身で行う。
しかし、拡張コマンドの場合は、変数の値、式の計算、文字列のロードなど、処理可能な
範囲を全て解決した後、
＜コマンド名＞：＜パラメータ＞,＜パラメータ＞･･･
の書式の文字列で、コマンドとパラメータの一連のデータを返す。
格言ご処理系では、アプリケーション側でこのコマンドを処理する。
なお、このとき、DLL内の変数と、アプリケーション側の変数を一致させる為、
必要なDLL関数を呼び出す必要がある。

汎用コマンドの例：
Let
Goto
If (･･･) goto
Memcpy
Memset
fopen
fread
fwrite
fprint
finput
fclose

ただし、
If (･･･) Then
	･･･
EndIf
のような構文は、
If !(･･･) Goto *Label1
	･･･
EndIf
*Label1

の形に変換する。

さらに、
Letコマンドは、
let, letAdd, letSub, letMul, letDiv, letMod,
     letAnd, letOr,  letXor, letNeg
のように、複数のコマンドに分ける。
