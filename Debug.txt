#include "StdAfx.h" #include "Lexer.h" CLexer::CLexer ( ) { InitLexer ( LexerTokenTableDefault , LEXER_TOKEN_TABLE_DEFAULT_COUNT )
} CLexer::~CLexer ( ) { } int CLexer::InitLexer ( LP_LEXER_TOKEN_TABLE lpLexerTokenTable , int TableCount ) { int i , len , max
unsigned char c
m_LastGetToken = - 1
m_LexerTokenTableCount = TableCount
m_lpLexerTokenTable = lpLexerTokenTable
memset ( m_TokenTableFirstLetter , 0 , sizeof ( m_TokenTableFirstLetter ) )
for ( c = 1
c < 128
c ++ ) { max = 0
for ( i = 0
i < TableCount
i ++ ) { if ( lpLexerTokenTable [ i ] . sCharacter [ 0 ] == c ) { len = strlen ( lpLexerTokenTable [ i ] . sCharacter )
if ( len > max ) { max = len
} } m_TokenTableFirstLetter [ c ] = max
} } return ( 1 )
} int CLexer::LexicalAnalyze ( const char * sText ) { char p , * s , * temp
char sBuffer [ MAX_TOKEN_LEN ]
char sTable [ MAX_TOKEN_LEN ]
int sBufWrite , tkType , r , index
m_TokenCount = 0
memset ( sBuffer , 0 , MAX_TOKEN_LEN )
sBufWrite = 0
tkType = 0
s = ( char * ) ( sText )
while ( * s ) { p = * s
r = IsCharacterInTable ( p )
if ( p == '\ "') { 			AddToken(sBuffer, tkType, sBufWrite)
temp = s + 1
while ( * temp ) { if ( ( * temp ) == '\ "' ) { 					break
} temp ++
} memcpy ( sBuffer , s , ( temp - s + 1 ) )
s = temp + 1
AddToken ( sBuffer , TOKEN_STRING , sBufWrite )
} else if ( p == ' ' | | p == '\t' | | p == ' , ' ) { AddToken ( sBuffer , tkType , sBufWrite )
if ( p == ' , ' ) { strcpy ( sBuffer , ","
AddToken ( sBuffer , TOKEN_SEPARATOR , sBufWrite )
} temp = ( s + 1 )
while ( * temp ) { p = * ( temp )
if ( p != ' ' & & p != '\t' ) { break
} temp ++
} s = temp - 1
} else if ( r ) { memset ( sTable , 0 , sizeof ( sTable ) )
memcpy ( sTable , s , r )
do { index = IsStringInTable ( sTable )
if ( index >= 0 ) { AddToken ( sBuffer , tkType , sBufWrite )
strcpy ( sBuffer , sTable )
tkType = m_lpLexerTokenTable [ index ] . token_type
AddToken ( sBuffer , tkType , sBufWrite )
if ( tkType == TOKEN_SEPARATOR ) { temp = ( s + 1 )
while ( * temp ) { p = * ( temp )
if ( p != ' ' & & p != '\t' ) { break
} temp ++
} s = temp - 1
} else { s += ( r - 1 )
} break
} r --
sTable [ r ] = 0
} while ( r > 0 )
} else { if ( p >= '0' & & p <= '9' ) { if ( sBufWrite == 0 ) { tkType = TOKEN_NUMERIC
} sBuffer [ sBufWrite ++ ] = p
} else { if ( tkType == TOKEN_NUMERIC ) { AddToken ( sBuffer , tkType , sBufWrite )
} sBuffer [ sBufWrite ++ ] = p
tkType = TOKEN_OTHERS
} } s ++
} AddToken ( sBuffer , tkType , sBufWrite )
return ( m_TokenCount )
}
