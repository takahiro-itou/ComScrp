//////////////////////////////////////////////////////////////////////
//																	//
//								コマンド							//
//																	//
//////////////////////////////////////////////////////////////////////

//　汎用コマンド

--------------------------------------------------------------------------------
変数操作
--------------------------------------------------------------------------------
コマンド：Let
機　　能：変数に値を代入する。単純代入。
書　　式：<varname> = <value>
解　　説：変数 <varname> に右辺の値 <value> を代入する。
		　右辺は式でも良い。
	　例：a = 1

コマンド：Add
機　　能：変数に値を代入する。複合代入(加算)。
書　　式：<varname> += <value>
解　　説：変数 <varname> の値に、右辺の値 <value> を足して、
		　それを再び、変数 <varname> に代入する。
	　例：a += 1

コマンド：Sub
機　　能：変数に値を代入する。複合代入(減算)。
書　　式：<varname> -= <value>
解　　説：変数 <varname> の値から、右辺の値 <value> をひいて、
		　それを再び、変数 <varname> に代入する。
	　例：a -= 1

コマンド：Mul
機　　能：変数に値を代入する。複合代入(乗算)。
書　　式：<varname> *= <value>
解　　説：変数 <varname> の値に、右辺の値 <value> をかけて、
		　それを再び、変数 <varname> に代入する。
	　例：a *= 2

コマンド：Div
機　　能：変数に値を代入する。複合代入(除算)。
書　　式：<varname> /= <value>
解　　説：変数 <varname> の値を、右辺の値 <value> で割って、
		　それを再び、変数 <varname> に代入する。
	　例：a /= 2

コマンド：Mod
機　　能：変数に値を代入する。複合代入(剰余算)。
書　　式：<varname> %= <value>
解　　説：変数 <varname> の値を、右辺の値 <value> で割った余りを、
		　変数 <varname> に代入する。
	　例：a %= 100

コマンド：And
機　　能：変数に値を代入する。複合代入(ビットアンド)。
書　　式：<varname> &= <value>
解　　説：変数 <varname> の値と、右辺の値 <value> の論理積(Logical And)をとり、
		　それを再び、変数 <varname> に代入する。
	　例：a &= 255

コマンド：Or
機　　能：変数に値を代入する。複合代入(ビットオア)。
書　　式：<varname> |= <value>
解　　説：変数 <varname> の値と、右辺の値 <value> の論理和(Logical Or)をとり、
		　それを再び、変数 <varname> に代入する。
	　例：a |= 1

コマンド：Xor
機　　能：変数に値を代入する。複合代入(排他的論理和)。
書　　式：<varname> ^= <value>
解　　説：変数 <varname> の値と、右辺の値 <value> の排他的論理和(Xor)をとり、
		　それを再び、変数 <varname> に代入する。
	　例：a ^= 1

コマンド：Neg
機　　能：変数に値を代入する。複合代入(否定)。
書　　式：Neg <varname>
解　　説：変数 <varname> の値を-1倍する。
	　例：a ^= 1

コマンド：LogAnd
機　　能：変数に値を代入する。複合代入(ロジカル・アンド)。
書　　式：<varname> && <value>
解　　説：変数 <varname> の値と、右辺の値 <value> の両方が共に０以外なら
		　変数 <varname> に1を代入し、そうでなければ0を代入する。
	　例：if ( a && 1 ) ...

コマンド：LogOr
機　　能：変数に値を代入する。複合代入(ロジカル・オア)。
書　　式：<varname> || <value>
解　　説：変数 <varname> の値と、右辺の値 <value> の少なくとも一方が０以外なら
		　変数 <varname> に1を代入し、そうでなければ0を代入する。
	　例：if ( a || 1 ) ...


--------------------------------------------------------------------------------
実行制御
--------------------------------------------------------------------------------
コマンド：goto
機　　能：スクリプトの実行ポイントを移動する。
書　　式：goto <label>
解　　説：指定したラベルにジャンプする。
　　　例：goto label1

コマンド：gosub
機　　能：サブルーチンへジャンプする
書　　式：gosub <label>
解　　説：指定したサブルーチンへジャンプする。
		　現在のインストラクションポインタ(IP)を
		　コールスタックへプッシュしたあと、
		　指定したラベルへIPを変更する。
	　例：gosub label2

コマンド：return
機　　能：サブルーチンから復帰する
書　　式：return
		：return <label>
解　　説：サブルーチン以外でのreturnはエラーとなる。
		　最初の書式では、コールスタックのトップが示すIPへジャンプする。
		　２番目の書式では、コールスタックのトップを破棄した後、
		　指定されたラベルへジャンプする。
	　例：return
		　return label3

コマンド：if
機　　能：条件分岐
書　　式：if ( <condition> ) goto <label>
		：if ( <condition> ) then <statement>
		：if ( <condition> ) then
				...
		　[else if ( <condition2> then
				...
		　[else
				...
		　]]
		　endif
解　　説：条件式を判断して、スクリプトの実行を制御する
	　例：if (a == 1) goto label1
		：if (a == 1) then b = 2
		：if (a >= 3) then
			x += 6
			y --
		　endif

コマンド：call
機　　能：関数を呼び出す。(ユーザー定義関数の呼び出し)
書　　式：call <VarName>, <FunctionName>, <Parameters...>
解　　説：ユーザーが定義した関数を呼び出す。
		　呼び出しはサブルーチンコールとして扱われ、
		　コールスタックを消費する。
		　ただし、関数内の変数は全てローカル変数となり、ワークスタックで処理される。
		　このため、関数内で使用可能な変数は最大 4096個に制限される。
		　また、関数の場合は、サブルーチンと異なり値を返すことも可能。
		　値の返し方は、次のresultコマンドを参照。
		　返された値は、変数 <VarName> に代入される。
	　例：call a, Func1, x, y, z

コマンド：result
機　　能：関数を終了する。(値を呼び出し元に返す)
書　　式：result <value>
解　　説：関数内以外でのresultはエラーとなる。
		　関数の呼び出し元(メインルーチンまたは、関数）へ値 <value> を返し、
		　関数を直ちに終了する。
		　この時、関数のエピローグコードが実行される。
	　例：result 1

コマンド：push
機　　能：スタックへ値を積む。
書　　式：push <value>
解　　説：指定した値(式も可能)をスタックへ積む。
		　スタックへ値を代入し、スタックポインタを１減らす。
		　関数呼び出しの時、プロローグコードで自動的に使用される。
	　例：push a

コマンド：pop
機　　能：スタックから値を取り出す。
書　　式：pop <VarName>
解　　説：指定した変数へ、スタックトップの値を代入した後、
		　スタックポインタを１増やす。
	　例：pop a

--------------------------------------------------------------------------------
メモリ操作系
--------------------------------------------------------------------------------
コマンド：memcpy
機　　能：メモリの内容を転送する
書　　式：memcpy <Dest>, <Source>, <Size>
解　　説：<Source>で指示された変数から、<Size>個分の変数の内容を
		　<Dest>で指示された変数の場所に書き込む。
		　転送元と転送先に重なりがある場合の結果は未定義
		　(C/C++のmemcpy関数と同様)
	　例：memcpy a, b, 8

コマンド：memset
機　　能：メモリに、ある数値で書き込む。
書　　式：memset <Dest>, <Value>, <Size>
解　　説：<Dest>で指示された変数から、<Size>個分の変数に
		　<Value>を書き込む
	　例：memset c, 0, 32


--------------------------------------------------------------------------------
ストリーム操作系
--------------------------------------------------------------------------------
コマンド：fopen
機　　能：ファイルを開く。
書　　式：fopen <"FileName">, <"FileMode">, <FileNumber>
解　　説：ファイルが操作できるように、指定したファイルをオープンする。
		　<"FileName">にファイル名を、<FileNumber>にファイル番号を指定する。
		　ファイル番号は０以上３１以下でなければならない。
		　さらに、ファイル番号０は標準入出力(Standard I/O)として予約されている。
		　空いているファイル番号は、freefileで取得できる。
		　　ファイルモードには次の値を指定する。
		　r:リード。ファイルから読み込みが可能。
		　w:ライト。ファイルへの書き込みが可能。
	　例：fopen "test.dat", "r", 1

コマンド：fread
機　　能：ファイルからデータを読み込む。
書　　式：fread <FileNumber>, <VarName>, <Size>
解　　説：ファイルから指定したバッファへデータを読み込む。
		　ファイルは、読み込みモードで開かれている必要がある。
		　読み出しサイズ <Size> は変数の個数ではなく、バイト数なので注意すること。
	　例：fread 1, b, 1024

コマンド：fwrite
機　　能：ファイルへデータを書き込む
書　　式：fwrite <FileNumber>, <VarName>, <Size>
解　　説：指定したバッファの内容をファイルへ書き込む。
		　ファイルは、書き込みモードで開かれている必要がある。
		　読み出しサイズ <Size> は変数の個数ではなく、バイト数なので注意すること。
	　例：fwrite 1, b, 1024

コマンド：fprint
機　　能：現在検討中。

コマンド：finput
機　　能：現在検討中。

コマンド：fclose
機　　能：ファイルを閉じる。
書　　式：fclose <FileNumber>
解　　説：指定したファイルをクローズする。ストリームバッファをフラッシュして、
		　ファイル入出力を完了する。ファイルをクローズしないと、
		　書き込んだデータはディスクへセーブされずに破棄されることがある。
		　スクリプトの処理が正常終了されれば、自動的にファイルはクローズされる。		　
	　例：fclose 1

コマンド：freefile
機　　能：使用可能なファイル番号を取得する。
書　　式：freefile <VarName>
解　　説：現在どのファイルにも関連付けされていないファイル番号を取得し、
		　変数 <VarName> に代入する。取得された値は、fopenなどの、
		　ファイル操作コマンドで使用できる。
	　例：freefile f
